# ***************************************************************
# Copyright (c) 2021 Jittor. All Rights Reserved. 
# Maintainers: 
#     Guowei Yang <471184555@qq.com>
#     Wenyang Zhou <576825820@qq.com>
#     Dun Liang <randonlang@gmail.com>. 
# 
# This file is subject to the terms and conditions defined in
# file 'LICENSE.txt', which is part of this source code package.
# ***************************************************************
# This model is generated by pytorch converter.
import jittor as jt
from jittor import nn

from jdet.utils.registry import BACKBONES

__all__ = ['ResNet', 'Resnet18', 'Resnet34', 'Resnet26', 'Resnet38', 'Resnet50', 'Resnet101', 'Resnet152', 'Resnext50_32x4d', 'Resnext101_32x8d', 'Wide_resnet50_2', 'Wide_resnet101_2', 'Resnet18_v1d', 'Resnet34_v1d', 'Resnet50_v1d', 'Resnet101_v1d', 'Resnet152_v1d']

class CSKConv(nn.Module):
    def __init__(self, features, M=2, G=32, r=16, stride=1, L=32):
        super().__init__()
        d = max(int(features / r), L)
        self.M = M
        self.features = features
        self.convs = nn.ModuleList([])
        for i in range(M):
            self.convs.append(nn.Sequential(
                nn.Conv2d(features, features, kernel_size=3, stride=stride, padding=1 + i, dilation=1 + i, groups=G,
                          bias=False),
                nn.BatchNorm(features),
                nn.Relu()
            ))

        self.fc = nn.Sequential(nn.Conv2d(features, d, kernel_size=1, stride=1, bias=False),
                                nn.BatchNorm(d),
                                nn.Relu()
                                )

        self.gap = nn.AdaptiveAvgPool2d((1, 1))
        self.fcs = nn.ModuleList([])

        for i in range(M):
            self.fcs.append(
                nn.Conv2d(d, features, kernel_size=1, stride=1)
            )
        self.softmax = nn.Softmax(dim=1)

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv2d, nn.Linear)):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
            try:
                nn.init.constant_(m.bias, 0)
            except:
                pass

    def execute(self, x):

        batch_size = x.shape[0]

        feats = [conv(x) for conv in self.convs]
        feats = jt.concat(feats, dim=1)
        feats = feats.view(batch_size, self.M, self.features, feats.shape[2], feats.shape[3])

        feats_U = feats.sum(dim=1)
        feats_S = self.gap(feats_U)
        feats_Z = self.fc(feats_S)

        attention_vectors = [fc(feats_Z) for fc in self.fcs]
        attention_vectors = jt.concat(attention_vectors, dim=1)
        attention_vectors = attention_vectors.view(batch_size, self.M, self.features, 1, 1)
        attention_vectors = self.softmax(attention_vectors)

        feats_V = (feats * attention_vectors).sum(dim=1)

        return feats_V

class CSKConv_serial(nn.Module):
    def __init__(self, features, M=2, G=32, r=16, stride=1, L=32):
        super().__init__()
        d = max(int(features / r), L)
        self.M = M
        self.features = features
        self.convs = nn.ModuleList([])
        for i in range(M):
            self.convs.append(nn.Sequential(
                nn.Conv2d(features, features, kernel_size=3, stride=stride, padding=1 + i, dilation=1 + i, groups=G,
                          bias=False),
                nn.BatchNorm(features),
                nn.Relu()
            ))

        self.fc = nn.Sequential(nn.Conv2d(features, d, kernel_size=1, stride=1, bias=False),
                                nn.BatchNorm(d),
                                nn.Relu()
                                )
        self.gap = nn.AdaptiveAvgPool2d((1, 1))
        self.fcs = nn.ModuleList([])

        for i in range(M):
            self.fcs.append(
                nn.Conv2d(d, features, kernel_size=1, stride=1)
            )
        self.softmax = nn.Softmax(dim=1)

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv2d, nn.Linear)):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
            try:
                nn.init.constant_(m.bias, 0)
            except:
                pass

    def execute(self, x):

        batch_size = x.shape[0]
        feats = []
        for i, conv in zip(range(len(self.convs)), self.convs):
            if i == 0:

                feats.append(conv(x))
            else:
                feats.append(conv(feats[i-1]))

        feats = jt.concat(feats, dim=1)
        feats = feats.view(batch_size, self.M, self.features, feats.shape[2], feats.shape[3])

        feats_U = feats.sum(dim=1)
        feats_S = self.gap(feats_U)
        feats_Z = self.fc(feats_S)

        attention_vectors = [fc(feats_Z) for fc in self.fcs]
        attention_vectors = jt.concat(attention_vectors, dim=1)
        attention_vectors = attention_vectors.view(batch_size, self.M, self.features, 1, 1)
        attention_vectors = self.softmax(attention_vectors)

        feats_V = (feats * attention_vectors).sum(dim=1)

        return feats_V

class SSKConv(nn.Module):
    def __init__(self, features, M=2, G=32, r=16, stride=1, L=32):
        super().__init__()
        d = max(int(features / r), L)
        self.M = M
        self.features = features
        self.convs = nn.ModuleList([])
        for i in range(M):
            self.convs.append(nn.Sequential(
                nn.Conv2d(features, features, kernel_size=3, stride=stride, padding=1 + i, dilation=1 + i, groups=G, bias=False),
                nn.BatchNorm(features),
                nn.Relu()
            ))

        self.fc = nn.Sequential(nn.Conv2d(2, 1, kernel_size=7, stride=1, padding=3, bias=False),
                                nn.BatchNorm(1),
                                nn.Relu()
                                )

        self.fcs = nn.ModuleList([])

        for i in range(M):
            self.fcs.append(
                nn.Conv2d(1, 1, kernel_size=1, stride=1)
            )

        self.softmax = nn.Softmax(dim=2)

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv2d, nn.Linear)):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
            try:
                nn.init.constant_(m.bias, 0)
            except:
                pass

    def execute(self, x):

        batch_size, _, _, _ = x.shape

        feats = [conv(x) for conv in self.convs]
        _, _, h, w = feats[0].shape
        feats = jt.concat(feats, dim=1)
        feats = feats.view(batch_size, self.M, self.features, feats.shape[2], feats.shape[3])

        feats_U = feats.sum(dim=1)
        max_out = feats_U.max(dim=1, keepdims=True)
        avg_out = feats_U.mean(dim=1, keepdims=True)

        mid_feats = jt.concat([max_out, avg_out], dim=1)
        feats_Z = self.fc(mid_feats)
        attention_vectors = [fc(feats_Z) for fc in self.fcs]
        attention_vectors = jt.concat(attention_vectors, dim=1)
        attention_vectors = attention_vectors.view(batch_size, self.M, 1, h, w)
        attention_vectors = self.softmax(attention_vectors)

        feats_V = (feats * attention_vectors).sum(dim=1)

        return feats_V


class SPCSKConv(nn.Module):
    def __init__(self, features, M=2, G=32, r=16, stride=1, L=32):
        super().__init__()
        d = max(int(features * 21 / r), L)
        self.M = M
        self.features = features
        self.convs = nn.ModuleList([])
        for i in range(M):
            self.convs.append(nn.Sequential(
                nn.Conv2d(features, features, kernel_size=3, stride=stride, padding=1 + i, dilation=1 + i, groups=G,
                          bias=False),
                nn.BatchNorm(features),
                nn.Relu()
            ))

        self.gap1 = nn.AdaptiveAvgPool2d((1, 1))
        self.gap2 = nn.AdaptiveAvgPool2d((2, 2))
        self.gap4 = nn.AdaptiveAvgPool2d((4, 4))

        self.fc = nn.Sequential(nn.Conv2d(features * 21, d, kernel_size=1, stride=1, bias=False),
                                nn.BatchNorm(d),
                                nn.Relu()
                                )
        self.fcs = nn.ModuleList([])

        for i in range(M):
            self.fcs.append(
                nn.Conv2d(d, features, kernel_size=1, stride=1)
            )

        self.softmax = nn.Softmax(dim=1)

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv2d, nn.Linear)):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
            try:
                nn.init.constant_(m.bias, 0)
            except:
                pass

    def execute(self, x):
        batch_size = x.shape[0]

        feats = [conv(x) for conv in self.convs]
        feats = jt.concat(feats, dim=1)
        feats = feats.view(batch_size, self.M, self.features, feats.shape[2], feats.shape[3])

        feats_U = feats.sum(dim=1)
        feats_S1 = self.gap1(feats_U)
        feats_S2 = self.gap2(feats_U)
        feats_S4 = self.gap4(feats_U)
        feats_S = jt.concat([feats_S1, feats_S2, feats_S4], dim=1)
        feats_Z = self.fc(feats_S)

        attention_vectors = [fc(feats_Z) for fc in self.fcs]
        attention_vectors = jt.concat(attention_vectors, dim=1)
        attention_vectors = attention_vectors.view(batch_size, self.M, self.features, 1, 1)
        attention_vectors = self.softmax(attention_vectors)

        feats_V = (feats * attention_vectors).sum(dim=1)

        return feats_V


class SCSKConv(nn.Module):
    def __init__(self, features, stride=1):
        super().__init__()
        self.s = SSKConv(features, stride=stride)
        self.c = CSKConv(features, stride=stride)

    def execute(self, x):
        return self.s(x) + self.c(x)


class CBAM(nn.Module):
    def __init__(self, channel, reduction=16, spatial_kernel=7):
        super(CBAM, self).__init__()
        self.max_pool = nn.AdaptiveMaxPool2d(1)
        self.avg_pool = nn.AdaptiveAvgPool2d(1)

        self.mlp = nn.Sequential(
            nn.Conv2d(channel, channel // reduction, 1, bias=False),
            nn.ReLU(),
            nn.Conv2d(channel // reduction, channel, 1, bias=False)
        )

        self.conv = nn.Conv2d(2, 1, kernel_size=spatial_kernel, padding=spatial_kernel // 2, bias=False)
        self.sigmoid = nn.Sigmoid()
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv2d, nn.Linear)):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
            try:
                nn.init.constant_(m.bias, 0)
            except:
                pass


    def execute(self, x):
        max_out = self.mlp(self.max_pool(x))
        avg_out = self.mlp(self.avg_pool(x))
        channel_out = self.sigmoid(max_out + avg_out)
        x = channel_out * x

        max_out = x.max(dim=1, keepdims=True)
        avg_out = x.mean(dim=1, keepdims=True)
        spatial_out = self.sigmoid(self.conv(jt.concat([max_out, avg_out], dim=1)))
        x = spatial_out * x
        return x

class scSE(nn.Module):
    def __init__(self, channel, reduction=16):
        super(scSE, self).__init__()
        self.cSE = nn.Sequential(
            nn.AdaptiveAvgPool2d(1),
            nn.Conv2d(channel, channel // reduction, 1, bias=False),
            nn.ReLU(),
            nn.Conv2d(channel // reduction, channel, 1, bias=False),
            nn.Sigmoid()
        )
        self.sSE = nn.Sequential(
            nn.Conv2d(channel, channel, 1, bias=False),
            nn.Sigmoid()
        )
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv2d, nn.Linear)):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
            try:
                nn.init.constant_(m.bias, 0)
            except:
                pass

    def execute(self, x):
        return x * self.cSE(x) + x * self.sSE(x)

class CAM(nn.Module):
   def __init__(self, channel, reduction=16):
       super(CAM, self).__init__()
       self.pool = nn.AdaptiveAvgPool2d(1)
       self.SE = nn.Sequential(
           nn.Conv2d(channel, channel // reduction, 1, bias=False),
           nn.ReLU(),
           nn.Conv2d(channel // reduction, channel, 1, bias=False),
           nn.Sigmoid()
       )
       self.apply(self._init_weights)

   def _init_weights(self, m):
       if isinstance(m, (nn.Conv2d, nn.Linear)):
           nn.init.kaiming_normal_(m.weight, mode='fan_out')
           try:
               nn.init.constant_(m.bias, 0)
           except:
               pass

   def execute(self, x):
       return x * self.SE(self.pool(x))

# class CAM(nn.Module):
#     def __init__(self, channel, reduction=16):
#         super(CAM, self).__init__()
#         self.pool1 = nn.AdaptiveAvgPool2d(1)
#         self.pool2 = nn.AdaptiveMaxPool2d(1)
#         self.SE = nn.Sequential(
#             nn.Conv2d(channel * 2, channel * 2 // reduction, 1, bias=False),
#             nn.ReLU(),
#             nn.Conv2d(channel * 2 // reduction, channel, 1, bias=False),
#             nn.Sigmoid()
#         )
#         self.apply(self._init_weights)
#
#     def _init_weights(self, m):
#         if isinstance(m, (nn.Conv2d, nn.Linear)):
#             nn.init.kaiming_normal_(m.weight, mode='fan_out')
#             try:
#                 nn.init.constant_(m.bias, 0)
#             except:
#                 pass
#
#     def execute(self, x):
#         return x * self.SE(jt.concat([self.pool1(x), self.pool2(x).reshape(x.shape[0], -1, 1, 1)], dim=1))

class SPCAM(nn.Module):
    def __init__(self, channel, ways="avg", merge_ways ="concat", reduction=16):
        super(SPCAM, self).__init__()
        self.ways = ways
        self.merge_ways = merge_ways
        if ways == "avg":
            self.p1 = nn.AdaptiveAvgPool2d(1)
            self.p2 = nn.AdaptiveAvgPool2d(2)
        if ways == "max":
            self.p1 = nn.AdaptiveMaxPool2d(1)
            self.p2 = nn.AdaptiveMaxPool2d(2)
        if ways == "mix":
            self.a1 = nn.AdaptiveAvgPool2d(1)
            self.a2 = nn.AdaptiveAvgPool2d(2)
            self.m1 = nn.AdaptiveMaxPool2d(1)
            self.m2 = nn.AdaptiveMaxPool2d(2)
            if merge_ways == "concat":
                self.mlp = nn.Sequential(
                    nn.Conv2d(channel * 10, channel * 10 // reduction, 1, bias=False),
                    nn.ReLU(),
                    nn.Conv2d(channel * 10 // reduction, channel, 1, bias=False),
                    nn.Sigmoid()
                    )
        else:
            if merge_ways == "concat":
                self.mlp = nn.Sequential(
                    nn.Conv2d(channel * 5, channel * 5 // reduction, 1, bias=False),
                    nn.ReLU(),
                    nn.Conv2d(channel * 5 // reduction, channel, 1, bias=False),
                    nn.Sigmoid()
                    )
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv2d, nn.Linear)):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
            try:
                nn.init.constant_(m.bias, 0)
            except:
                pass

    def execute(self, x):
        b, c, h, w = x.shape
        if self.ways == "mix":
            a1 = self.a1(x)
            a2 = self.a2(x).reshape(b, -1, 1, 1)
            m1 = self.m1(x)
            m2 = self.m2(x).reshape(b, -1, 1, 1)
            if self.merge_ways == "concat":
                feats = jt.concat([a1, a2, m1, m2], dim=1)
        else:
            p1 = self.p1(x)
            p2 = self.p2(x).reshape(b, -1, 1, 1)
            if self.merge_ways == "concat":
                feats =  jt.concat([p1, p2], dim=1)

        return x * self.mlp(feats)

class SAM(nn.Module):
    def __init__(self, spatial_kernel=7, ways="mix", merge_ways="concat"):
        super(SAM, self).__init__()
        self.merge_ways = merge_ways
        self.ways = ways
        if merge_ways == "concat" and ways=="mix":
            self.mlp = nn.Sequential(
                nn.Conv2d(2, 1, spatial_kernel, padding=spatial_kernel // 2, bias=False),
                nn.Sigmoid()
                )
        else:
            self.mlp = nn.Sequential(
                nn.Conv2d(1, 1, spatial_kernel, padding=spatial_kernel // 2, bias=False),
                nn.Sigmoid()
                )
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv2d, nn.Linear)):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
            try:
                nn.init.constant_(m.bias, 0)
            except:
                pass

    def execute(self, x):
        if self.ways == "mix":
            max_out = jt.max(x, dim=1, keepdims=True)
            avg_out = jt.mean(x, dim=1, keepdims=True)
            if self.merge_ways == "concat":
                feats = jt.concat([max_out, avg_out], dim=1)
            if self.merge_ways == "add":
                feats = max_out + avg_out
        if self.ways == "max":
            feats = jt.max(x, dim=1, keepdims=True)
        if self.ways == "avg":
            feats = jt.mean(x, dim=1, keepdims=True)

        return x * self.mlp(feats)

def conv3x3(in_planes, out_planes, stride=1, groups=1, dilation=1):
    conv=nn.Conv(in_planes, out_planes, kernel_size=3, stride=stride, padding=dilation, groups=groups, bias=False, dilation=dilation)
    jt.init.relu_invariant_gauss_(conv.weight, mode="fan_out")
    return conv

def conv1x1(in_planes, out_planes, stride=1):
    conv=nn.Conv(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)
    jt.init.relu_invariant_gauss_(conv.weight, mode="fan_out")
    return conv

class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1, base_width=64, dilation=1, norm_layer=None):
        super(BasicBlock, self).__init__()
        if (norm_layer is None):
            norm_layer = nn.BatchNorm
        if ((groups != 1) or (base_width != 64)):
            raise ValueError('BasicBlock only supports groups=1 and base_width=64')
        if (dilation > 1):
            raise NotImplementedError('Dilation > 1 not supported in BasicBlock')
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = norm_layer(planes)
        self.relu = nn.Relu()
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = norm_layer(planes)
        self.downsample = downsample
        self.stride = stride

    def execute(self, x):
        identity = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        if (self.downsample is not None):
            identity = self.downsample(x)
        out += identity
        out = self.relu(out)
        return out

class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1, base_width=64, dilation=1, norm_layer=None, attention=False, attention_type=None, c_p="avg", c_m="concat", s_p="avg", s_m="concat", s_conv_size=7):
        super(Bottleneck, self).__init__()
        if (norm_layer is None):
            norm_layer = nn.BatchNorm
        width = (int((planes * (base_width / 64.0))) * groups)
        self.conv1 = conv1x1(inplanes, width)
        self.bn1 = norm_layer(width)
        if attention:
            if attention_type == "SSK":
                self.conv2 = SSKConv(width, stride=stride)
            if attention_type == "CSK":
                self.conv2 = CSKConv(width, stride=stride)
            if attention_type == "SCSK":
                self.conv2 = SCSKConv(width, stride=stride)
            if attention_type == "SPCSK":
                self.conv2 = SPCSKConv(width, stride=stride)
            if attention_type == "CSK_serial":
                self.conv2 = CSKConv_serial(width, stride=stride)
            if attention_type == "CBAM":
                self.conv2 = conv3x3(width, width, stride, groups, dilation)
                self.attention = CBAM(planes * self.expansion)
                self.attention_type = True
            if attention_type == "scSE":
                self.conv2 = conv3x3(width, width, stride, groups, dilation)
                self.attention = scSE(planes * self.expansion)
                self.attention_type = True
            if attention_type == "CAM":
                self.conv2 = conv3x3(width, width, stride, groups, dilation)
                self.attention = CAM(planes * self.expansion)
                self.attention_type = True
            if attention_type == "SPCAM":
                self.conv2 = conv3x3(width, width, stride, groups, dilation)
                self.attention = SPCAM(planes * self.expansion, c_p, c_m)
                self.attention_type = True
            if attention_type == "SAM":
                self.conv2 = conv3x3(width, width, stride, groups, dilation)
                self.attention = SAM(s_conv_size, s_p, s_m)
                self.attention_type = True

        else:
            self.conv2 = conv3x3(width, width, stride, groups, dilation)
            self.attention_type = False
        self.bn2 = norm_layer(width)
        self.conv3 = conv1x1(width, (planes * self.expansion))
        self.bn3 = norm_layer((planes * self.expansion))
        self.relu = nn.Relu()
        self.downsample = downsample
        self.stride = stride

        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv2d, nn.Linear)):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
            try:
                nn.init.constant_(m.bias, 0)
            except:
                pass


    def execute(self, x):
        identity = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)
        out = self.conv3(out)
        out = self.bn3(out)
        if (self.downsample is not None):
            identity = self.downsample(x)
        if self.attention_type:
            out = self.attention(out)
        out += identity
        out = self.relu(out)
        return out

@BACKBONES.register_module()
class ResNet(nn.Module):

    def __init__(self, block, layers, return_stages=["layer4"],frozen_stages=-1,norm_eval=True,num_classes=None, groups=1, width_per_group=64, replace_stride_with_dilation=None, norm_layer=None, attention=False, attention_type=None, c_p="avg", c_m="concat", s_p="avg", s_m="concat", s_conv_size=7):
        super(ResNet, self).__init__()
        if (norm_layer is None):
            norm_layer = nn.BatchNorm
        self.frozen_stages = frozen_stages
        self.norm_eval = norm_eval
        self._norm_layer = norm_layer
        self.inplanes = 64
        self.dilation = 1
        if (replace_stride_with_dilation is None):
            replace_stride_with_dilation = [False, False, False]
        if (len(replace_stride_with_dilation) != 3):
            raise ValueError('replace_stride_with_dilation should be None or a 3-element tuple, got {}'.format(replace_stride_with_dilation))
        self.groups = groups
        self.base_width = width_per_group
        self.conv1 = nn.Conv(3, self.inplanes, kernel_size=7, stride=2, padding=3, bias=False)
        jt.init.relu_invariant_gauss_(self.conv1.weight, mode="fan_out")
        self.bn1 = norm_layer(self.inplanes)
        self.relu = nn.Relu()
        self.maxpool = nn.Pool(kernel_size=3, stride=2, padding=1, op='maximum')
        self.layer1 = self._make_layer(block, 64, layers[0], attention=attention, attention_type=attention_type, c_p=c_p, c_m=c_m, s_p=s_p, s_m=s_m, s_conv_size=s_conv_size)
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2, dilate=replace_stride_with_dilation[0], attention=attention, attention_type=attention_type, c_p=c_p, c_m=c_m, s_p=s_p, s_m=s_m, s_conv_size=s_conv_size)
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2, dilate=replace_stride_with_dilation[1], attention=attention, attention_type=attention_type, c_p=c_p, c_m=c_m, s_p=s_p, s_m=s_m, s_conv_size=s_conv_size)
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2, dilate=replace_stride_with_dilation[2], attention=attention, attention_type=attention_type, c_p=c_p, c_m=c_m, s_p=s_p, s_m=s_m, s_conv_size=s_conv_size)
        self.num_classes=num_classes
        self.return_stages = return_stages
        if num_classes is not None:
            self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
            self.fc = nn.Linear((512 * block.expansion), num_classes)
        self._freeze_stages()
        self.apply(self._init_weights)

    def _make_layer(self, block, planes, blocks, stride=1, dilate=False, attention=False, attention_type=None, c_p="avg", c_m="concat", s_p="avg", s_m="concat", s_conv_size=7):
        norm_layer = self._norm_layer
        downsample = None
        previous_dilation = self.dilation
        if dilate:
            self.dilation *= stride
            stride = 1
        if ((stride != 1) or (self.inplanes != (planes * block.expansion))):
            downsample = nn.Sequential(conv1x1(self.inplanes, (planes * block.expansion), stride), norm_layer((planes * block.expansion)))
        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, self.groups, self.base_width, previous_dilation, norm_layer, attention, attention_type, c_p=c_p, c_m=c_m, s_p=s_p, s_m=s_m, s_conv_size=s_conv_size))
        self.inplanes = (planes * block.expansion)
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes, groups=self.groups, base_width=self.base_width, dilation=self.dilation, norm_layer=norm_layer, attention=attention, attention_type=attention_type, c_p=c_p, c_m=c_m, s_p=s_p, s_m=s_m, s_conv_size=s_conv_size))
        return nn.Sequential(*layers)      

    def _freeze_stages(self):
        if self.frozen_stages >= 0:
            self.bn1.eval()
            for m in [self.conv1, self.bn1]:
                for param in m.parameters():
                    param.stop_grad()  

        for i in range(1, self.frozen_stages + 1):
            m = getattr(self, 'layer{}'.format(i))
            m.eval()
            for param in m.parameters():
                param.stop_grad()  

    def _init_weights(self, m):
        if isinstance(m, (nn.Conv2d, nn.Linear)):
            nn.init.kaiming_normal_(m.weight, mode='fan_out')
            try:
                nn.init.constant_(m.bias, 0)
            except:
                pass

    def execute(self, x):
        outputs = []
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)
        for i in range(1,5):
            name = f"layer{i}"
            x = getattr(self,name)(x)
            if name in self.return_stages:
                outputs.append(x)
        if self.num_classes is not None:
            x = self.avgpool(x)
            x = jt.reshape(x, (x.shape[0], -1))
            x = self.fc(x)
            if "fc" in self.return_stages:
                outputs.append(x)
        return tuple(outputs)

    def train(self):
        super(ResNet, self).train()
        self._freeze_stages()
        if self.norm_eval:
            for m in self.modules():
                # trick: eval have effect on BatchNorm only
                if isinstance(m, nn.BatchNorm):
                    m.eval()


def _resnet(block, layers, **kwargs):
    model = ResNet(block, layers, **kwargs)
    return model

@BACKBONES.register_module()
def Resnet18(pretrained=False, **kwargs):
    model = _resnet(BasicBlock, [2, 2, 2, 2], **kwargs)
    if pretrained: model.load("jittorhub://resnet18.pkl")
    return model
resnet18 = Resnet18

@BACKBONES.register_module()
def Resnet34(pretrained=False, **kwargs):
    model = _resnet(BasicBlock, [3, 4, 6, 3], **kwargs)
    if pretrained: model.load("jittorhub://resnet34.pkl")
    return model
resnet34 = Resnet34

@BACKBONES.register_module()
def Resnet50(pretrained=False, **kwargs):
    model = _resnet(Bottleneck, [3, 4, 6, 3], **kwargs)
    if pretrained: model.load("jittorhub://resnet50.pkl")
    return model
resnet50 = Resnet50

@BACKBONES.register_module()
def Resnet38(**kwargs):
    return _resnet(Bottleneck, [2, 3, 5, 2], **kwargs)

@BACKBONES.register_module()
def Resnet26(**kwargs):
    return _resnet(Bottleneck, [1, 2, 4, 1], **kwargs)

@BACKBONES.register_module()
def Resnet101(pretrained=False, **kwargs):
    """
    ResNet-101 model architecture.
    Example::
        model = jittor.models.Resnet101()
        x = jittor.random([10,3,224,224])
        y = model(x) # [10, 1000]
    """
    model = _resnet(Bottleneck, [3, 4, 23, 3], **kwargs)
    if pretrained: model.load("jittorhub://resnet101.pkl")
    return model

@BACKBONES.register_module()
def Resnet152(pretrained=False, **kwargs):
    model = _resnet(Bottleneck, [3, 8, 36, 3], **kwargs)
    if pretrained: model.load("jittorhub://resnet152.pkl")
    return model

@BACKBONES.register_module()
def Resnext50_32x4d(pretrained=False, **kwargs):
    kwargs['groups'] = 32
    kwargs['width_per_group'] = 4
    model = _resnet(Bottleneck, [3, 4, 6, 3], **kwargs)
    if pretrained: model.load("jittorhub://resnext50_32x4d.pkl")
    return model

@BACKBONES.register_module()
def Resnext101_32x8d(pretrained=False, **kwargs):
    kwargs['groups'] = 32
    kwargs['width_per_group'] = 8
    model = _resnet(Bottleneck, [3, 4, 23, 3], **kwargs)
    if pretrained: model.load("jittorhub://resnext101_32x8d.pkl")
    return model

@BACKBONES.register_module()
def Wide_resnet50_2(pretrained=False, **kwargs):
    kwargs['width_per_group'] = (64 * 2)
    model = _resnet(Bottleneck, [3, 4, 6, 3], **kwargs)
    if pretrained: model.load("jittorhub://wide_resnet50_2.pkl")
    return model

@BACKBONES.register_module()
def Wide_resnet101_2(pretrained=False, **kwargs):
    kwargs['width_per_group'] = (64 * 2)
    model = _resnet(Bottleneck, [3, 4, 23, 3], **kwargs)
    if pretrained: model.load("jittorhub://wide_resnet101_2.pkl")
    return model

class ResNet_v1d(nn.Module):
    def __init__(self, block, layers, return_stages=["layer4"],frozen_stages=-1,norm_eval=True,num_classes=None, groups=1, width_per_group=64, replace_stride_with_dilation=None, norm_layer=None):
        super(ResNet_v1d, self).__init__()
        if (norm_layer is None):
            norm_layer = nn.BatchNorm
        self.frozen_stages = frozen_stages
        self.norm_eval = norm_eval
        self._norm_layer = norm_layer
        self.inplanes = 64
        self.dilation = 1
        if (replace_stride_with_dilation is None):
            replace_stride_with_dilation = [False, False, False]
        if (len(replace_stride_with_dilation) != 3):
            raise ValueError('replace_stride_with_dilation should be None or a 3-element tuple, got {}'.format(replace_stride_with_dilation))
        self.groups = groups
        self.base_width = width_per_group
        self.C1 = nn.Sequential(
            nn.Conv(3, 32, kernel_size=3, stride=2, padding=1, bias=False),
            norm_layer(32),
            nn.Relu(),
            nn.Conv(32, 32, kernel_size=3, stride=1, padding=1, bias=False),
            norm_layer(32),
            nn.Relu(),
            nn.Conv(32, 64, kernel_size=3, stride=1, padding=1, bias=False),
            norm_layer(64),
            nn.Relu(),
        )

        self.relu = nn.Relu()
        self.maxpool = nn.Pool(kernel_size=3, stride=2, padding=1, op='maximum')
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2, dilate=replace_stride_with_dilation[0])
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2, dilate=replace_stride_with_dilation[1])
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2, dilate=replace_stride_with_dilation[2])
        self.num_classes=num_classes
        self.return_stages = return_stages
        if num_classes is not None:
            self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
            self.fc = nn.Linear((512 * block.expansion), num_classes)

    def _make_layer(self, block, planes, blocks, stride=1, dilate=False):
        norm_layer = self._norm_layer
        downsample = None
        previous_dilation = self.dilation
        if dilate:
            self.dilation *= stride
            stride = 1
        if ((stride != 1) or (self.inplanes != (planes * block.expansion))):
            downsample = nn.Sequential(nn.Pool(stride, stride=stride, op="mean"), conv1x1(self.inplanes, (planes * block.expansion), 1), norm_layer((planes * block.expansion)))
        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, self.groups, self.base_width, previous_dilation, norm_layer))
        self.inplanes = (planes * block.expansion)
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes, groups=self.groups, base_width=self.base_width, dilation=self.dilation, norm_layer=norm_layer))
        return nn.Sequential(*layers)        

    def execute(self, x):
        outputs = []
        x = self.C1(x)
        x = self.maxpool(x)
        for i in range(1,5):
            name = f"layer{i}"
            x = getattr(self,name)(x)
            if name in self.return_stages:
                outputs.append(x)
        if self.num_classes is not None:
            x = self.avgpool(x)
            x = jt.reshape(x, (x.shape[0], -1))
            x = self.fc(x)
            if "fc" in self.return_stages:
                outputs.append(x)
        return outputs

    def _freeze_stages(self):
        if self.frozen_stages >= 0:
            self.bn1.eval()
            for m in [self.conv1, self.bn1]:
                for param in m.parameters():
                    param.stop_grad()  

        for i in range(1, self.frozen_stages + 1):
            m = getattr(self, 'layer{}'.format(i))
            m.eval()
            for param in m.parameters():
                param.stop_grad()  

    def train(self):
        super(ResNet_v1d, self).train()
        self._freeze_stages()
        if self.norm_eval:
            for m in self.modules():
                # trick: eval have effect on BatchNorm only
                if isinstance(m, nn.BatchNorm):
                    m.eval()

def _resnet_v1d(block, layers, **kwargs):
    model = ResNet_v1d(block, layers, **kwargs)
    return model

@BACKBONES.register_module()
def Resnet18_v1d(pretrained=False, **kwargs):
    model = _resnet_v1d(BasicBlock, [2, 2, 2, 2], **kwargs)
    if pretrained: model.load("jittorhub://resnet18.pkl")
    return model

@BACKBONES.register_module()
def Resnet34_v1d(pretrained=False, **kwargs):
    model = _resnet_v1d(BasicBlock, [3, 4, 6, 3], **kwargs)
    if pretrained: model.load("jittorhub://resnet34.pkl")
    return model

@BACKBONES.register_module()
def Resnet50_v1d(pretrained=False, **kwargs):
    model = _resnet_v1d(Bottleneck, [3, 4, 6, 3], **kwargs)
    # if pretrained: model.load("jittorhub://resnet50.pkl")
    return model

@BACKBONES.register_module()
def Resnet101_v1d(pretrained=False, **kwargs):
    model = _resnet_v1d(Bottleneck, [3, 4, 23, 3], **kwargs)
    if pretrained: model.load("jittorhub://resnet101.pkl")
    return model

@BACKBONES.register_module()
def Resnet152_v1d(pretrained=False, **kwargs):
    model = _resnet_v1d(Bottleneck, [3, 8, 36, 3], **kwargs)
    if pretrained: model.load("jittorhub://resnet152.pkl")
    return model
